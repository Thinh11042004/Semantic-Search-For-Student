const pool = require('../db'); // K·∫øt n·ªëi POSTGRESQL qua pool
const path = require('path'); // Th∆∞ vi·ªán x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file
const fs = require('fs'); // Th∆∞ vi·ªán thao t√°c file h·ªá th·ªëng NodeJS
const axios = require('axios'); // Th∆∞ vi·ªán g·ª≠i HTTP request

const EMBEDDING_API = process.env.EMBEDDING_API; // ƒê·ªãa ch·ªâ API l·∫•y embedding





// ------------------------------
// H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát.
// So s√°nh n·ªôi dung kh√¥ng b·ªã l·ªách gi·ªØa c√≥ d·∫•u v√† kh√¥ng d·∫•u.
// ------------------------------
const removeDiacritics = (str) => {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
};

// ------------------------------
// API t√¨m ki·∫øm bi·ªÉu m·∫´u theo semantic search
// ------------------------------
const searchForms = async (req, res) => {
    try {
        const { query } = req.query; // L·∫•y tham s·ªë query t·ª´ URL

        // -------------------------
        // Ki·ªÉm tra h·ª£p l·ªá ƒë·∫ßu v√†o.
        // Kh√¥ng c√≥ query ho·∫∑c query kh√¥ng ph·∫£i chu·ªói s·∫Ω b√°o l·ªói 400.
        // -------------------------
        if (!query || typeof query !== 'string' || query.trim() === '') {
            return res.status(400).json({ error: 'Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng query' });
        }

        // -------------------------
        // Ghi log query 
        // -------------------------
        console.log('üîé Ng∆∞·ªùi d√πng t√¨m ki·∫øm:', query);

        // -------------------------
        // G·ª≠i tr·ª±c ti·∫øp t·ªõi AI Service ƒë·ªÉ l·∫•y embedding.
        // -------------------------
        const embeddingResponse = await axios.post(EMBEDDING_API, 
            JSON.stringify(query), 
            { headers: { 'Content-Type': 'application/json' } }
          );
          

        // -------------------------
        // Ki·ªÉm tra embedding c√≥ h·ª£p l·ªá kh√¥ng.
        // -------------------------
        if (!embeddingResponse.data.embedding || !Array.isArray(embeddingResponse.data.embedding)) {
            throw new Error('Ph·∫£n h·ªìi embedding kh√¥ng h·ª£p l·ªá t·ª´ AI Service');
        }

        // Chuy·ªÉn embedding th√†nh chu·ªói vector ƒë·ªÉ truy·ªÅn v√†o c√¢u l·ªánh SQL.
        const vector = '[' + embeddingResponse.data.embedding.join(',') + ']';

        // -------------------------
        // Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu:
        // - L·∫•y c√°c bi·ªÉu m·∫´u c√≥ ƒë·ªô t∆∞∆°ng ƒë·ªìng  cao nh·∫•t.
        // - S·∫Øp x·∫øp gi·∫£m d·∫ßn theo similarity. 
        // -------------------------
        const result = await pool.query(
            `
            SELECT title, file_path, content, created_at,
                   1 - (embedding <=> $1::vector) AS similarity
            FROM forms
            ORDER BY similarity DESC
            LIMIT 10
            `,
            [vector]
        );

        
        // -------------------------
        // L·ªçc k·∫øt qu·∫£ c√≥ ch·ª©a t·ª´ kh√≥a ho·∫∑c similarity cao
        // -------------------------
        
        const keyword = removeDiacritics(query); // Chu·∫©n h√≥a t·ª´ kh√≥a ng∆∞·ªùi d√πng (kh√¥ng d·∫•u)

        const filtered = result.rows.filter(row => 
            row.content && removeDiacritics(row.content).includes(keyword)
        );

        const finalResults = filtered.length > 0 ? filtered : result.rows;


        // -------------------------
        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p:
        // -------------------------

        if (filtered.length === 0) {
            return res.status(200).json({
                query,
                message: "Kh√¥ng t√¨m th·∫•y bi·ªÉu m·∫´u ph√π h·ª£p."
            });
        }


        // ------------------------
        // Tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£:
        // -------------------------

        return res.status(200).json({
            query,
            totalMatches: result.rows.length,
            results: result.rows.map(row => ({
                title: row.title,
                file_path: row.file_path,
                created_at: row.created_at || new Date()  ,
                similarity: parseFloat(row.similarity).toFixed(4),
            }))
        });

    } catch (err) {
    
        console.error('‚ùå L·ªói trong searchForms:', err.message);
        return res.status(500).json({
            error: 'Search failed',
            details: err.message
        });
    }
};

module.exports = { searchForms };
